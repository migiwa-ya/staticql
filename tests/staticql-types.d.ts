// Auto-generated by generate-types.ts

type Index<T> = T & { __brand: "index" };

type SourceRecord = { slug: Index<string>; raw: string };

export type HerbsRecord = SourceRecord & { compounds?: CompoundsRecord[]; tags?: TagsRecord[]; recipes?: RecipesRecord[]; name: Index<string>; compoundSlugs?: Index<string[]>; tagSlugs: Index<string[]>; overview: string; efficacy?: string };

export type HerbsRelation_compounds = Record<string, string[]>;

export type HerbsRelation_tags = Record<string, string[]>;

export type HerbsRelation_recipes = Record<string, string[]>;

export type TagsRecord = SourceRecord & { slug: string; name: string };

export type CompoundsRecord = SourceRecord & { slug: string; name: string };

export type RecipesRecord = SourceRecord & { herbs?: HerbsRecord[]; process?: ProcessesRecord; recipeGroupSlug: Index<string>; summary?: string; processSlug?: string; recipe: string[] };

export type RecipesRelation_herbs = Record<string, string[]>;

export type RecipesRelation_process = Record<string, string>;

export type RecipeGroupsRecord = SourceRecord & { slug: string; processSlug: string; combinedHerbs: { slug: string; herbStateSlug: string; herbPartSlug: string }[] };

export type HerbPartsRecord = SourceRecord & { slug: string; name: string };

export type HerbStatesRecord = SourceRecord & { slug: string; name: string };

export type ProcessesRecord = SourceRecord & { slug: string; name: string };

export type SourceTypeMap = {
  herbs: HerbsRecord;
  tags: TagsRecord;
  compounds: CompoundsRecord;
  recipes: RecipesRecord;
  recipeGroups: RecipeGroupsRecord;
  herbParts: HerbPartsRecord;
  herbStates: HerbStatesRecord;
  processes: ProcessesRecord;
};
